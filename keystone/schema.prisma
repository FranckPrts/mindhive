// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id                       String          @id @default(cuid())
  username                 String          @default("")
  publicId                 String          @unique @default("")
  publicReadableId         String          @unique @default("")
  type                     String?         @default("USER")
  email                    String          @unique @default("")
  permissions              Permission[]    @relation("Permission_assignedTo")
  info                     String?
  generalInfo              String?
  studiesInfo              String?
  consentsInfo             String?
  tasksInfo                String?
  isPublic                 Boolean         @default(false)
  password                 String
  facebook                 String          @default("")
  twitter                  String          @default("")
  instagram                String          @default("")
  publicMail               String          @default("")
  website                  String          @default("")
  dateCreated              DateTime?       @default(now())
  language                 String?         @default("EN-US")
  participantIn            Study[]         @relation("Profile_participantIn")
  teacherIn                Class[]         @relation("Class_creator")
  mentorIn                 Class[]         @relation("Class_mentors")
  studentIn                Class[]         @relation("Class_students")
  classNetworksCreated     ClassNetwork[]  @relation("ClassNetwork_creator")
  journals                 Journal[]       @relation("Journal_creator")
  posts                    Post[]          @relation("Post_author")
  authorOfTalk             Talk[]          @relation("Talk_author")
  memberOfTalk             Talk[]          @relation("Profile_memberOfTalk")
  authorOfWord             Word[]          @relation("Word_author")
  templates                Template[]      @relation("Template_author")
  collaboratorInTemplate   Template[]      @relation("Profile_collaboratorInTemplate")
  taskCreatorIn            Task[]          @relation("Task_author")
  collaboratorInTask       Task[]          @relation("Profile_collaboratorInTask")
  favoriteTasks            Task[]          @relation("Profile_favoriteTasks")
  researcherIn             Study[]         @relation("Study_author")
  collaboratorInStudy      Study[]         @relation("Profile_collaboratorInStudy")
  consentCreatorIn         Consent[]       @relation("Consent_author")
  collaboratorInConsent    Consent[]       @relation("Consent_collaborators")
  creatorOfProposal        ProposalBoard[] @relation("ProposalBoard_creator")
  authorOfProposal         ProposalBoard[] @relation("ProposalBoard_author")
  reviews                  Review[]        @relation("Review_author")
  reviewsUpvoted           Review[]        @relation("Profile_reviewsUpvoted")
  assignedToProposalCard   ProposalCard[]  @relation("Profile_assignedToProposalCard")
  editsProposalCard        ProposalCard[]  @relation("ProposalCard_isEditedBy")
  updates                  Update[]        @relation("Update_user")
  authorOfLesson           Lesson[]        @relation("Lesson_author")
  collaboratorInLesson     Lesson[]        @relation("Lesson_collaborators")
  authorOfCurriculum       Curriculum[]    @relation("Curriculum_author")
  collaboratorInCurriculum Curriculum[]    @relation("Curriculum_collaborators")
  authorOfAssignment       Assignment[]    @relation("Assignment_author")
  authorOfHomework         Homework[]      @relation("Homework_author")
  datasets                 Dataset[]       @relation("Dataset_profile")
  summaryResults           SummaryResult[] @relation("SummaryResult_user")
  authoredSpecs            Spec[]          @relation("Spec_author")
  profileType              String?         @default("individual")
  image                    ProfileImage?   @relation("Profile_image", fields: [imageId], references: [id])
  imageId                  String?         @unique @map("image")
  firstName                String          @default("")
  lastName                 String          @default("")
  pronouns                 String?
  location                 String          @default("")
  bio                      String          @default("")
  bioInformal              String          @default("")
  occupation               String          @default("")
  education                String?
  languages                String?
  introVideo               String?
  mentorPreferGrade        String?
  mentorPreferGroup        String?
  mentorPreferClass        String?
  interests                Tag[]           @relation("Profile_interests")
  availableStartDate       String?
  availableEndDate         String?
  availableStartTime       String          @default("")
  availableEndTime         String          @default("")
  availableDays            String          @default("[]")
  passwordResetToken       String?
  passwordResetIssuedAt    DateTime?
  passwordResetRedeemedAt  DateTime?
}

model ProfileImage {
  id      String   @id @default(cuid())
  image   String?
  altText String   @default("")
  profile Profile? @relation("Profile_image")
}

model Permission {
  id             String    @id @default(cuid())
  name           String    @unique @default("")
  canManageUsers Boolean   @default(false)
  assignedTo     Profile[] @relation("Permission_assignedTo")
}

model Class {
  id          String         @id @default(cuid())
  code        String         @unique @default("")
  title       String         @default("")
  description String         @default("")
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?
  settings    String?
  mentors     Profile[]      @relation("Class_mentors")
  students    Profile[]      @relation("Class_students")
  networks    ClassNetwork[] @relation("Class_networks")
  creator     Profile?       @relation("Class_creator", fields: [creatorId], references: [id])
  creatorId   String?        @map("creator")
  talks       Talk[]         @relation("Class_talks")
  studies     Study[]        @relation("Class_studies")
  assignments Assignment[]   @relation("Assignment_classes")

  @@index([creatorId])
}

model ClassNetwork {
  id          String    @id @default(cuid())
  title       String    @unique @default("")
  description String    @default("")
  settings    String?
  creator     Profile?  @relation("ClassNetwork_creator", fields: [creatorId], references: [id])
  creatorId   String?   @map("creator")
  classes     Class[]   @relation("Class_networks")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?

  @@index([creatorId])
}

model Report {
  id          String    @id @default(cuid())
  message     String    @default("")
  dateCreated DateTime? @default(now())
}

model Journal {
  id          String    @id @default(cuid())
  code        String    @unique @default("")
  title       String    @default("")
  description String    @default("")
  creator     Profile?  @relation("Journal_creator", fields: [creatorId], references: [id])
  creatorId   String?   @map("creator")
  posts       Post[]    @relation("Post_journal")
  settings    String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?

  @@index([creatorId])
}

model Post {
  id        String    @id @default(cuid())
  title     String    @default("")
  content   String    @default("")
  author    Profile?  @relation("Post_author", fields: [authorId], references: [id])
  authorId  String?   @map("author")
  journal   Journal?  @relation("Post_journal", fields: [journalId], references: [id])
  journalId String?   @map("journal")
  settings  String?
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  @@index([authorId])
  @@index([journalId])
}

model Talk {
  id        String    @id @default(cuid())
  author    Profile?  @relation("Talk_author", fields: [authorId], references: [id])
  authorId  String?   @map("author")
  members   Profile[] @relation("Profile_memberOfTalk")
  words     Word[]    @relation("Word_talk")
  settings  String?
  studies   Study[]   @relation("Study_talks")
  classes   Class[]   @relation("Class_talks")
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  @@index([authorId])
}

model Word {
  id        String    @id @default(cuid())
  author    Profile?  @relation("Word_author", fields: [authorId], references: [id])
  authorId  String?   @map("author")
  talk      Talk?     @relation("Word_talk", fields: [talkId], references: [id])
  talkId    String?   @map("talk")
  message   String    @default("")
  new       Boolean   @default(false)
  settings  String?
  isMain    Boolean   @default(false)
  parent    Word?     @relation("Word_parent", fields: [parentId], references: [id])
  parentId  String?   @map("parent")
  children  Word[]    @relation("Word_parent")
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  @@index([authorId])
  @@index([talkId])
  @@index([parentId])
}

model Template {
  id               String          @id @default(cuid())
  title            String          @default("")
  slug             String          @default("")
  shortDescription String          @default("")
  description      String          @default("")
  author           Profile?        @relation("Template_author", fields: [authorId], references: [id])
  authorId         String?         @map("author")
  collaborators    Profile[]       @relation("Profile_collaboratorInTemplate")
  parameters       String?
  fileAddress      String          @default("")
  scriptAddress    String          @default("")
  style            String          @default("")
  tasks            Task[]          @relation("Task_template")
  datasets         Dataset[]       @relation("Dataset_template")
  summaryResults   SummaryResult[] @relation("SummaryResult_template")
  settings         String?
  createdAt        DateTime?       @default(now())
  updatedAt        DateTime?

  @@index([authorId])
}

model Task {
  id                         String          @id @default(cuid())
  title                      String          @default("")
  taskType                   String?
  slug                       String          @unique @default("")
  description                String          @default("")
  descriptionForParticipants String          @default("")
  author                     Profile?        @relation("Task_author", fields: [authorId], references: [id])
  authorId                   String?         @map("author")
  collaborators              Profile[]       @relation("Profile_collaboratorInTask")
  favoriteBy                 Profile[]       @relation("Profile_favoriteTasks")
  template                   Template?       @relation("Task_template", fields: [templateId], references: [id])
  templateId                 String?         @map("template")
  parameters                 String?
  settings                   String?
  link                       String          @default("")
  public                     Boolean         @default(false)
  submitForPublishing        Boolean         @default(false)
  isOriginal                 Boolean         @default(false)
  isExternal                 Boolean         @default(false)
  image                      String          @default("")
  largeImage                 String          @default("")
  consent                    Consent[]       @relation("Consent_tasks")
  datasets                   Dataset[]       @relation("Dataset_task")
  summaryResults             SummaryResult[] @relation("SummaryResult_task")
  createdAt                  DateTime?       @default(now())
  updatedAt                  DateTime?

  @@index([authorId])
  @@index([templateId])
}

model Study {
  id                          String          @id @default(cuid())
  title                       String          @default("")
  slug                        String          @unique @default("")
  description                 String          @default("")
  shortDescription            String          @default("")
  image                       StudyImage?     @relation("Study_image", fields: [imageId], references: [id])
  imageId                     String?         @unique @map("image")
  settings                    String?
  info                        String?
  public                      Boolean         @default(false)
  featured                    Boolean         @default(false)
  submitForPublishing         Boolean         @default(false)
  isHidden                    Boolean         @default(false)
  components                  String?
  flow                        String?
  diagram                     String          @default("")
  author                      Profile?        @relation("Study_author", fields: [authorId], references: [id])
  authorId                    String?         @map("author")
  collaborators               Profile[]       @relation("Profile_collaboratorInStudy")
  participants                Profile[]       @relation("Profile_participantIn")
  guests                      Guest[]         @relation("Guest_participantIn")
  consent                     Consent[]       @relation("Consent_studies")
  proposal                    ProposalBoard[] @relation("ProposalBoard_study")
  proposalMain                ProposalBoard?  @relation("ProposalBoard_studyMain")
  descriptionInProposalCard   ProposalCard?   @relation("Study_descriptionInProposalCard", fields: [descriptionInProposalCardId], references: [id])
  descriptionInProposalCardId String?         @map("descriptionInProposalCard")
  classes                     Class[]         @relation("Class_studies")
  reviews                     Review[]        @relation("Review_study")
  tags                        Tag[]           @relation("Study_tags")
  talks                       Talk[]          @relation("Study_talks")
  datasets                    Dataset[]       @relation("Dataset_study")
  summaryResults              SummaryResult[] @relation("SummaryResult_study")
  specs                       Spec[]          @relation("Spec_studies")
  vizJournals                 VizJournal[]    @relation("VizJournal_study")
  createdAt                   DateTime?       @default(now())
  updatedAt                   DateTime?
  status                      String?         @default("WORKING")
  currentVersion              String          @default("")
  versionHistory              String?
  projectName                 String          @default("")

  @@index([authorId])
  @@index([descriptionInProposalCardId])
}

model StudyImage {
  id      String  @id @default(cuid())
  image   String?
  altText String  @default("")
  study   Study?  @relation("Study_image")
}

model Consent {
  id            String    @id @default(cuid())
  code          String    @unique @default("")
  title         String    @default("")
  public        Boolean   @default(false)
  description   String    @default("")
  organization  String    @default("")
  info          String?
  settings      String?
  author        Profile?  @relation("Consent_author", fields: [authorId], references: [id])
  authorId      String?   @map("author")
  collaborators Profile[] @relation("Consent_collaborators")
  studies       Study[]   @relation("Consent_studies")
  tasks         Task[]    @relation("Consent_tasks")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime?

  @@index([authorId])
}

model Update {
  id         String    @id @default(cuid())
  user       Profile?  @relation("Update_user", fields: [userId], references: [id])
  userId     String?   @map("user")
  updateArea String    @default("")
  link       String    @default("")
  content    String?
  hasOpen    Boolean   @default(false)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?

  @@index([userId])
}

model Dataset {
  id              String         @id @default(cuid())
  token           String         @unique @default("")
  date            String         @default("")
  profile         Profile?       @relation("Dataset_profile", fields: [profileId], references: [id])
  profileId       String?        @map("profile")
  guest           Guest?         @relation("Dataset_guest", fields: [guestId], references: [id])
  guestId         String?        @map("guest")
  type            String?
  template        Template?      @relation("Dataset_template", fields: [templateId], references: [id])
  templateId      String?        @map("template")
  task            Task?          @relation("Dataset_task", fields: [taskId], references: [id])
  taskId          String?        @map("task")
  testVersion     String         @default("")
  study           Study?         @relation("Dataset_study", fields: [studyId], references: [id])
  studyId         String?        @map("study")
  summaryResult   SummaryResult? @relation("Dataset_summaryResult", fields: [summaryResultId], references: [id])
  summaryResultId String?        @unique @map("summaryResult")
  dataPolicy      String         @default("")
  info            String?
  isCompleted     Boolean        @default(false)
  isIncluded      Boolean        @default(false)
  createdAt       DateTime?      @default(now())
  completedAt     DateTime?

  @@index([profileId])
  @@index([guestId])
  @@index([templateId])
  @@index([taskId])
  @@index([studyId])
}

model ProposalBoard {
  id          String            @id @default(cuid())
  title       String            @default("")
  slug        String            @unique @default("")
  description String            @default("")
  isTemplate  Boolean           @default(false)
  isSubmitted Boolean           @default(false)
  checklist   String?
  settings    String?
  creator     Profile?          @relation("ProposalBoard_creator", fields: [creatorId], references: [id])
  creatorId   String?           @map("creator")
  author      Profile?          @relation("ProposalBoard_author", fields: [authorId], references: [id])
  authorId    String?           @map("author")
  study       Study?            @relation("ProposalBoard_study", fields: [studyId], references: [id])
  studyId     String?           @map("study")
  studyMain   Study?            @relation("ProposalBoard_studyMain", fields: [studyMainId], references: [id])
  studyMainId String?           @unique @map("studyMain")
  sections    ProposalSection[] @relation("ProposalSection_board")
  reviews     Review[]          @relation("Review_proposal")
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?

  @@index([creatorId])
  @@index([authorId])
  @@index([studyId])
}

model ProposalSection {
  id          String         @id @default(cuid())
  title       String         @default("")
  description String         @default("")
  position    Float?
  board       ProposalBoard? @relation("ProposalSection_board", fields: [boardId], references: [id])
  boardId     String?        @map("board")
  cards       ProposalCard[] @relation("ProposalCard_section")
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?

  @@index([boardId])
}

model ProposalCard {
  id               String           @id @default(cuid())
  title            String           @default("")
  description      String           @default("")
  position         Float?
  content          String           @default("")
  comment          String           @default("")
  settings         String?
  section          ProposalSection? @relation("ProposalCard_section", fields: [sectionId], references: [id])
  sectionId        String?          @map("section")
  assignedTo       Profile[]        @relation("Profile_assignedToProposalCard")
  studyDescription Study[]          @relation("Study_descriptionInProposalCard")
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?
  isEditedBy       Profile?         @relation("ProposalCard_isEditedBy", fields: [isEditedById], references: [id])
  isEditedById     String?          @map("isEditedBy")
  lastTimeEdited   DateTime?
  type             String?          @default("PROPOSAL")
  shareType        String?          @default("COLLECTIVE")
  homework         Homework[]       @relation("Homework_proposalCard")

  @@index([sectionId])
  @@index([isEditedById])
}

model Review {
  id         String         @id @default(cuid())
  author     Profile?       @relation("Review_author", fields: [authorId], references: [id])
  authorId   String?        @map("author")
  study      Study?         @relation("Review_study", fields: [studyId], references: [id])
  studyId    String?        @map("study")
  proposal   ProposalBoard? @relation("Review_proposal", fields: [proposalId], references: [id])
  proposalId String?        @map("proposal")
  settings   String?
  content    String?
  stage      String?
  createdAt  DateTime?      @default(now())
  updatedAt  DateTime?
  upvotedBy  Profile[]      @relation("Profile_reviewsUpvoted")

  @@index([authorId])
  @@index([studyId])
  @@index([proposalId])
}

model Curriculum {
  id            String    @id @default(cuid())
  title         String    @default("")
  slug          String    @unique @default("")
  description   String    @default("")
  diagram       String    @default("")
  author        Profile?  @relation("Curriculum_author", fields: [authorId], references: [id])
  authorId      String?   @map("author")
  collaborators Profile[] @relation("Curriculum_collaborators")
  settings      String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime?

  @@index([authorId])
}

model Lesson {
  id            String    @id @default(cuid())
  title         String    @default("")
  slug          String    @unique @default("")
  description   String    @default("")
  type          String    @default("")
  content       String    @default("")
  settings      String?
  author        Profile?  @relation("Lesson_author", fields: [authorId], references: [id])
  authorId      String?   @map("author")
  collaborators Profile[] @relation("Lesson_collaborators")
  isPublic      Boolean   @default(false)
  isFeatured    Boolean   @default(false)
  parent        Lesson?   @relation("Lesson_parent", fields: [parentId], references: [id])
  parentId      String?   @map("parent")
  children      Lesson[]  @relation("Lesson_parent")
  tags          Tag[]     @relation("Lesson_tags")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime?

  @@index([authorId])
  @@index([parentId])
}

model Tag {
  id          String       @id @default(cuid())
  title       String       @default("")
  slug        String       @unique @default("")
  description String       @default("")
  lessons     Lesson[]     @relation("Lesson_tags")
  assignments Assignment[] @relation("Assignment_tags")
  homeworks   Homework[]   @relation("Homework_tags")
  studies     Study[]      @relation("Study_tags")
  specs       Spec[]       @relation("Spec_tags")
  level       String?      @default("1")
  parent      Tag?         @relation("Tag_parent", fields: [parentId], references: [id])
  parentId    String?      @map("parent")
  children    Tag[]        @relation("Tag_parent")
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?
  profiles    Profile[]    @relation("Profile_interests")

  @@index([parentId])
}

model Assignment {
  id         String     @id @default(cuid())
  code       String     @unique @default("")
  author     Profile?   @relation("Assignment_author", fields: [authorId], references: [id])
  authorId   String?    @map("author")
  classes    Class[]    @relation("Assignment_classes")
  homework   Homework[] @relation("Homework_assignment")
  title      String     @default("")
  content    String     @default("")
  settings   String?
  public     Boolean    @default(false)
  isTemplate Boolean    @default(false)
  tags       Tag[]      @relation("Assignment_tags")
  createdAt  DateTime?  @default(now())
  updatedAt  DateTime?

  @@index([authorId])
}

model Homework {
  id             String        @id @default(cuid())
  code           String        @unique @default("")
  author         Profile?      @relation("Homework_author", fields: [authorId], references: [id])
  authorId       String?       @map("author")
  assignment     Assignment?   @relation("Homework_assignment", fields: [assignmentId], references: [id])
  assignmentId   String?       @map("assignment")
  proposalCard   ProposalCard? @relation("Homework_proposalCard", fields: [proposalCardId], references: [id])
  proposalCardId String?       @map("proposalCard")
  title          String        @default("")
  content        String        @default("")
  settings       String?
  comment        String        @default("")
  public         Boolean       @default(false)
  tags           Tag[]         @relation("Homework_tags")
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?

  @@index([authorId])
  @@index([assignmentId])
  @@index([proposalCardId])
}

model SummaryResult {
  id          String    @id @default(cuid())
  user        Profile?  @relation("SummaryResult_user", fields: [userId], references: [id])
  userId      String?   @map("user")
  guest       Guest?    @relation("SummaryResult_guest", fields: [guestId], references: [id])
  guestId     String?   @map("guest")
  type        String?
  study       Study?    @relation("SummaryResult_study", fields: [studyId], references: [id])
  studyId     String?   @map("study")
  template    Template? @relation("SummaryResult_template", fields: [templateId], references: [id])
  templateId  String?   @map("template")
  task        Task?     @relation("SummaryResult_task", fields: [taskId], references: [id])
  taskId      String?   @map("task")
  testVersion String    @default("")
  metadataId  String    @default("")
  dataPolicy  String    @default("")
  fullResult  Dataset?  @relation("Dataset_summaryResult")
  data        String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?

  @@index([userId])
  @@index([guestId])
  @@index([studyId])
  @@index([templateId])
  @@index([taskId])
}

model Spec {
  id          String    @id @default(cuid())
  title       String    @default("")
  description String    @default("")
  isPublic    Boolean   @default(false)
  isTemplate  Boolean   @default(false)
  isFeatured  Boolean   @default(false)
  settings    String?
  content     String?
  author      Profile?  @relation("Spec_author", fields: [authorId], references: [id])
  authorId    String?   @map("author")
  studies     Study[]   @relation("Spec_studies")
  tags        Tag[]     @relation("Spec_tags")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?

  @@index([authorId])
}

model Guest {
  id                 String          @id @default(cuid())
  publicId           String          @unique @default("")
  publicReadableId   String          @unique @default("")
  type               String?         @default("GUEST")
  info               String?
  generalInfo        String?
  studiesInfo        String?
  consentsInfo       String?
  tasksInfo          String?
  guestAccountExpiry String          @default("")
  participantIn      Study[]         @relation("Guest_participantIn")
  datasets           Dataset[]       @relation("Dataset_guest")
  summaryResults     SummaryResult[] @relation("SummaryResult_guest")
  createdAt          DateTime?       @default(now())
  updatedAt          DateTime?
}

model VizJournal {
  id          String    @id @default(cuid())
  title       String    @default("")
  description String    @default("")
  isPublic    Boolean   @default(false)
  isTemplate  Boolean   @default(false)
  isFeatured  Boolean   @default(false)
  settings    String?
  content     String?
  study       Study?    @relation("VizJournal_study", fields: [studyId], references: [id])
  studyId     String?   @map("study")
  vizParts    VizPart[] @relation("VizPart_vizJournal")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime?

  @@index([studyId])
}

model VizPart {
  id           String       @id @default(cuid())
  title        String       @default("")
  description  String       @default("")
  dataOrigin   String?
  isPublic     Boolean      @default(false)
  isTemplate   Boolean      @default(false)
  isFeatured   Boolean      @default(false)
  settings     String?
  content      String?
  vizJournal   VizJournal?  @relation("VizPart_vizJournal", fields: [vizJournalId], references: [id])
  vizJournalId String?      @map("vizJournal")
  vizChapters  VizChapter[] @relation("VizChapter_vizPart")
  createdAt    DateTime?    @default(now())
  updatedAt    DateTime?
  position     Float?

  @@index([vizJournalId])
}

model VizChapter {
  id          String       @id @default(cuid())
  title       String       @default("")
  description String       @default("")
  isPublic    Boolean      @default(false)
  isTemplate  Boolean      @default(false)
  isFeatured  Boolean      @default(false)
  settings    String?
  content     String?
  vizPart     VizPart?     @relation("VizChapter_vizPart", fields: [vizPartId], references: [id])
  vizPartId   String?      @map("vizPart")
  vizSections VizSection[] @relation("VizSection_vizChapter")
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?
  position    Float?

  @@index([vizPartId])
}

model VizSection {
  id           String      @id @default(cuid())
  title        String      @default("")
  description  String      @default("")
  type         String?
  isPublic     Boolean     @default(false)
  isTemplate   Boolean     @default(false)
  isFeatured   Boolean     @default(false)
  settings     String?
  content      String?
  vizChapter   VizChapter? @relation("VizSection_vizChapter", fields: [vizChapterId], references: [id])
  vizChapterId String?     @map("vizChapter")
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?
  position     Float?

  @@index([vizChapterId])
}
